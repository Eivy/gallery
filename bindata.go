// Code generated by go-bindata.
// sources:
// base.css
// base.html
// base.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x6d\x8e\x9b\x30\x10\xfd\xbd\x9c\xc2\x52\x54\xa9\x2b\x2d\x11\xbb\x69\xda\x8a\x48\x3d\x43\xaf\x60\xb0\x81\x51\x8c\x8d\x8c\x49\xd8\xae\x72\xf7\x8e\x6d\xbe\x03\xe9\x56\xfb\x63\x61\x98\x8f\x37\x6f\xde\x4c\x0a\x53\x8a\x17\x92\x28\xf6\x4e\x3e\x82\xa7\x82\x43\x5e\x98\x98\xbc\x46\xd1\x97\x53\xf0\x74\x05\x66\x8a\xfe\xed\x16\x30\xb8\x58\xa7\x8a\x32\x06\x32\x8f\x49\x84\x2e\x25\xd5\x39\x48\xf7\x7c\x0b\xa8\xfd\x9c\x29\x69\xc2\x8c\x96\x20\xde\x63\x52\x53\x59\x87\x35\xd7\x90\xa1\xaf\xe1\xad\x09\x19\x4f\x95\xa6\x06\x14\x06\x35\x92\x71\x2d\x40\x72\xfc\x98\x2a\xa1\x74\x4c\x76\x59\x96\xd9\x54\xbb\x14\xd3\x68\x25\x5c\x41\x55\x83\x0f\xc8\xa0\xe5\xcc\x66\x52\x55\x4c\x0e\x16\xa2\xf6\x80\xdd\xb3\xcb\x4f\x05\xe4\xe8\x99\x72\x69\xb8\x9e\xf6\x60\x3d\x4a\x90\x61\x6f\x38\x46\x55\x7b\x1a\x5b\x3e\xda\xef\x7f\x42\x40\x48\x6d\x4c\xde\x2c\x06\x90\x55\x63\x2c\x80\x19\x0f\x4b\x92\x46\x3a\x08\x6d\x8c\x9a\x72\xd2\x19\x6e\xc1\x3e\x69\x8c\x51\xd2\xe6\x9a\x82\x74\xe0\x37\xdb\x59\xb0\xbf\x63\xa0\x31\x5e\x5d\xb8\xce\x84\xba\xc6\x63\xb5\x36\x1c\x9a\x18\x5d\xeb\x6d\xe2\x3c\x17\x5d\xa9\xe9\x10\xb7\x32\x3a\x4b\x07\xe7\x38\x6f\xda\x21\x4d\x68\x7a\xce\xb5\xc2\x71\x86\xdd\x18\x75\x9e\xd0\xaf\xd1\x8b\xfb\xdb\xff\x7c\x3e\xad\xe0\x66\x50\x57\x82\xa2\x46\xa4\x72\x02\x18\xb8\x7f\xed\x5b\xf0\xa4\x2d\xf9\xb7\x6c\xaa\x76\xd6\x9d\xe6\x02\x15\x75\xe1\x93\xe1\xbc\x7d\x9b\x50\xe8\x5f\x26\xc3\x3f\x44\x7e\xf8\xd6\xd4\x47\x0c\xb6\xb1\xd7\xef\x13\x53\xef\xd6\xdb\x12\xa5\x51\xbc\x08\xaa\x6a\x49\xad\x04\x58\x76\xb1\x3f\x8a\x2e\x82\x67\x66\x4b\x8e\x4b\x1a\xb0\x1b\x49\x4b\x3e\x97\x39\x4d\x30\x63\x63\xb8\x2b\x83\x1c\x94\x7e\x4c\x73\x19\x3e\x24\x9d\x44\xfb\xe3\x2a\xeb\x57\x84\x1d\x26\x9a\xd3\x73\x4c\xdc\x3f\x44\x28\x7a\xfb\x55\xd3\xaa\x37\x5b\x83\x85\x67\x98\xc5\x86\x69\x0c\xa4\x54\xf4\xfd\x94\xc0\x98\xe0\x5b\x4d\x2e\xcf\xc8\xff\xd6\xdc\xe3\x4d\x38\xdb\xb2\x9f\xea\x71\x51\x6d\x0d\x11\xa6\x84\x32\x27\x5b\xa2\x79\xb4\xdf\x3e\xf4\xd7\x5d\xf8\x64\x46\x6e\xa9\xa2\xc5\xb0\xac\x08\xfc\xd3\xe6\xa2\x61\xea\xb4\xf8\x4d\x73\xfe\xf1\xe8\x8a\x1c\x51\x60\xfd\xf0\xa6\x2b\xb8\x84\xb9\x13\xb8\x16\xee\xc2\xf4\x70\x46\x08\xf7\x87\xe0\xe1\x49\x1b\x69\x5f\x6c\xf2\x8f\xe7\xcf\xea\x7a\x5c\xe7\x83\x03\xa7\x1a\xd3\xc1\x5b\xd4\x1a\xce\x80\xa1\x89\x53\xd4\x5d\xa6\xd5\x7a\x9e\x9d\xd0\xb7\x38\x63\x2c\xec\xf8\xee\x8c\x03\xb1\xaf\x1d\x4d\x20\x3b\x20\xab\x52\x98\xc3\x09\x53\xee\x94\xba\x29\xff\x95\x75\xb6\x63\x18\xcf\xfd\xaa\x60\x66\x73\x1c\x53\x14\x98\x95\x4b\x3f\x4b\x1b\x3b\xcc\x0f\xb7\xd0\xa2\xf9\xd7\x4f\xd1\x2d\xf8\x1b\x00\x00\xff\xff\x05\xb5\x05\x3f\xce\x07\x00\x00")

func baseCssBytes() ([]byte, error) {
	return bindataRead(
		_baseCss,
		"base.css",
	)
}

func baseCss() (*asset, error) {
	bytes, err := baseCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.css", size: 1998, mode: os.FileMode(420), modTime: time.Unix(1445521892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xc1\x6e\xdb\x30\x0c\x3d\x77\xc0\xfe\x41\x0b\x30\x28\x05\xda\x38\xbd\x0d\xab\x95\xcb\xba\x01\xbd\x6c\x05\xd6\x1e\x76\xab\x62\x31\xb6\x56\xd9\xca\x24\x26\x4d\x60\xf8\xdf\x47\xca\x8e\x93\x0c\x18\xd0\x13\xe9\x67\x92\x7a\x8f\x8f\xf9\x87\xbb\x1f\x5f\x1e\x7f\x3d\x7c\x15\x15\xd6\x6e\xf1\xfe\x5d\xce\x51\x38\xdd\x94\x6a\xf2\x5b\x4f\x12\x02\xda\x70\xac\x01\xb5\x28\x2a\x1d\x22\xa0\x9a\x3c\x3d\x7e\xbb\xfe\x94\xfe\xa3\x45\x07\x8b\x3c\xeb\x23\x01\xb1\x08\x76\x8d\x94\xb5\xed\xec\x67\xca\xbb\x8e\xe0\x6c\xc4\xf3\x88\x7b\x07\x02\xf7\x6b\x50\x12\x61\x87\x59\x11\xa3\x1c\x1a\xf8\xd7\x50\xcf\xe9\xf8\x72\xa3\x6b\x50\x93\xad\x85\xd7\xb5\x0f\x38\x11\x85\x6f\x10\x1a\x62\xf2\x6a\x0d\x56\xca\xc0\xd6\x16\x70\x9d\x3e\xae\x84\x6d\x2c\x5a\xed\xae\x63\xa1\x1d\xa8\x9b\xd9\xfc\x4a\xd4\x84\xd5\x9b\xfa\x0c\xd2\xbb\x53\x68\xce\xd8\x26\x42\x48\x80\x5e\x12\xb6\x87\x98\x34\x66\x87\x25\x2c\xbd\xd9\x0b\xdf\x38\xaf\x8d\x92\xb1\xba\xaf\xcb\xe9\xa5\x24\x80\xb4\x79\xe7\x8e\x10\xd5\x5e\xe4\xc6\x6e\x85\xa5\x3a\xa6\x4a\xbf\xe5\x22\x21\x85\xd3\x31\x2a\xb9\xdc\x20\xfa\x86\xb0\x3e\x39\xc0\x45\xf5\xa0\x4b\xe0\x91\x85\xb3\xc5\x8b\x92\xa5\x47\x3f\x5d\x69\x17\xe1\xf2\x56\x2e\xd6\x01\xb6\x79\xd6\xb7\xbc\xad\x15\xc3\x26\x75\x36\xb4\xe7\x63\x67\x46\x4c\x16\x6d\x6b\x57\x62\x76\x67\x43\xec\xba\xc3\x2c\xe6\x6b\x6c\x18\xd8\x1d\x67\xa1\x2f\x4b\x07\x5c\x3b\xe5\x69\x9c\xfc\x33\xed\x54\x31\x4d\x20\x43\xdb\x36\xd0\x21\xc1\xf8\x04\x57\xe5\x5a\x54\x01\x56\x4a\x92\xd7\x5d\xc7\x35\x14\xf2\x4c\x8f\x94\xa0\x31\x5d\x37\x84\xc3\xe0\x71\xd0\x3d\x42\x1d\xf9\x3a\x12\x75\xf8\x23\x66\x8f\x74\x44\xe2\xd9\xd6\xa4\xfc\xb9\xeb\x2e\xce\x36\xec\x77\xe7\x2b\xaf\xac\x31\xc0\x2b\xb7\x75\x29\xd2\x75\x29\x99\x0e\xe6\xb3\xb8\x99\xaf\x77\xb7\x27\x72\x1d\x35\x4f\xb1\xb2\x31\xb9\xdb\xdb\x1d\x22\x7b\x3b\x80\xda\x61\xd2\xf0\x14\x1c\xcb\xe8\x99\x9e\x3e\xc6\xf7\x2a\xcf\xe4\x0e\xa5\x94\x7d\xa7\x7f\xa7\xaa\x47\xed\xe4\x72\xbf\xa7\xff\x6a\x70\xb6\x79\x91\x07\xf2\x15\xd8\xb2\x42\x66\x3f\xff\x48\xa6\xe4\xc8\x47\x4b\xc1\xbc\xe1\x5d\x2e\xca\x86\x86\x73\x12\xbc\x79\xde\xf0\x90\x90\xcd\x74\xf4\xe4\xc2\xdf\x00\x00\x00\xff\xff\x73\x56\x72\x6c\x2d\x04\x00\x00")

func baseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseHtml,
		"base.html",
	)
}

func baseHtml() (*asset, error) {
	bytes, err := baseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.html", size: 1069, mode: os.FileMode(420), modTime: time.Unix(1445508971, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5b\x6f\xdb\xb8\x12\x7e\x76\x7e\x05\x8f\x81\x13\x49\x8d\xad\xd8\xe7\xb4\x2f\x75\xdc\x60\x7b\xd9\x6d\x80\xb6\x5b\xb4\x59\x60\x81\x20\x0f\xb4\x44\x4b\x4c\x29\x52\x21\xe9\xb8\xc1\x36\xff\x7d\x67\x48\x4a\x96\x1c\x25\xdb\x2e\xf6\x61\x5f\x2c\x5e\x66\x86\x9c\xef\x9b\x0b\x7d\x43\x35\x11\x2b\xf5\x35\x57\x15\x59\x92\xf1\x49\xce\x6f\x08\xcf\x97\x11\xae\x45\x44\xc9\x4c\xf0\xec\xcb\x32\xd2\x55\x9c\x2c\x22\x62\xec\xad\x60\xcb\xa8\x56\xc6\x72\x25\x9f\x13\xcd\x04\xb5\xfc\x86\x2d\xa2\x17\xad\xa6\xda\x58\xd4\xdd\x2d\x70\xd9\x9f\x67\x9d\xb1\xe8\x9c\x81\x57\x61\x70\x09\xaa\x8b\x4d\xc5\xa4\x35\x17\xb3\xcb\x05\xa9\x35\xbb\x39\xab\x8a\x98\xe1\xf9\x99\xa0\xc6\xf8\xcb\xad\x36\xd6\x2a\x09\xa6\x78\x55\xb4\xeb\x30\x86\x95\x63\xb0\xee\xd7\x1f\xb7\x2d\xd9\x57\x7b\xcf\x74\xd7\xc4\xbd\xdf\xf1\xe2\x00\x2d\xe5\x60\x69\x4d\x85\x61\x7e\x2a\x14\xcd\xb9\x2c\xfa\x8b\xda\x7f\xae\x61\x35\x57\x99\x3b\x34\x15\x2a\xa3\x08\x5c\x6a\x18\xd5\x59\xe9\x25\x0c\x48\xcc\x26\x24\x83\xcf\xb3\xd9\xe2\x80\xaf\xe3\x6b\xf2\x1f\xa0\x62\x9c\x90\x3f\x0e\x46\x38\x4d\x2b\x6a\xb3\x32\x3e\x36\xcb\x38\x7d\x92\x1c\x9e\x1e\x27\x89\xd3\xaa\xa9\x36\xec\x4c\xda\x21\x89\x8b\xf9\x65\xb2\xe8\xab\x67\x1d\xf5\x6c\x50\x3d\xdb\x53\xbf\x3b\x58\x6f\x64\x86\x37\x26\x85\xb2\x2a\x5e\x35\x57\x5a\xe1\x05\x8e\x3a\x9e\x15\xcc\xbe\x11\xcc\x21\xfb\xf2\xf6\x15\x42\xf9\x81\x56\x2c\x8e\x90\xf9\x24\x15\x4c\x16\x16\xdc\x1d\x31\x80\x07\x34\xa7\x4b\x92\xc1\xac\xc1\xc7\x90\x13\x80\x80\x9c\x92\x28\x22\xcf\x49\x74\x0a\x34\x90\x23\x62\xc2\xf5\x11\x8c\x28\x4a\x40\x12\x0e\x84\x7b\x23\x4c\xad\xec\x61\xe6\x64\xb3\xc6\x36\x9a\xdb\x97\x39\xdd\xc9\x38\xb6\x86\x18\x39\x18\x8d\xee\xad\x81\x9c\x48\x6b\x0d\x8e\x67\x4a\x80\x81\xe8\xf8\x18\xed\x88\xb4\x84\xf0\x77\x83\x9a\xda\x52\x82\x9f\x30\xb9\xee\xa1\x65\x4a\x8c\x2b\x87\x16\x1e\x59\x77\x8f\x6c\x06\x01\xaf\xd4\x64\x5a\x09\x71\xae\x6a\xf2\xed\xdb\x4e\x6a\xa5\xf2\xdb\xdd\x56\xb8\xba\x45\xd6\xc8\x94\x6c\xb9\xcc\xd5\x36\xe5\x52\x32\xfd\x96\xf1\xa2\xb4\xe4\x09\x99\xa5\xcf\x82\xd8\xca\x89\x1d\x0d\x8b\xcd\x9d\x18\x00\x6b\x11\xa6\x19\x39\x3c\x44\x79\x18\xb9\xdb\x3a\x7d\x4a\xbe\x83\xd9\x92\xe7\x39\x93\x11\x06\xd9\x68\xad\x74\xcc\x7d\x18\x63\x15\xa1\x0d\xe1\x84\x93\x13\x42\xe1\x73\x74\x94\x80\xd8\x88\x5e\xf0\xcb\xd4\x68\x0c\x3e\x37\xa4\xc2\xa2\xba\x66\x76\xa3\x81\x82\x3b\x1f\x5b\xe4\x05\x89\x87\x70\x08\x2e\x74\x51\x1a\xc6\xd2\x0b\x26\x78\x24\xa6\xe6\x07\x48\xf3\x8f\xb4\x60\x71\x12\xf0\xf9\x51\xff\x1c\xf4\x15\x92\x78\x71\x09\xd3\xc6\xdb\xc6\xcd\xe9\x7c\x01\x38\x42\x08\x73\xf0\x74\x3a\xc5\x63\x1d\xbc\x27\xde\x49\xb5\x5e\x1b\x06\x17\xd0\x78\x9a\x9f\x20\xd9\x80\xfb\x63\xdb\x27\xc4\x27\xdb\x68\x04\x27\xa7\xf5\xc6\x94\xb1\x13\xef\x5d\xf7\x9c\x16\xfe\xb2\x58\xb4\x12\x28\x69\x8e\x0d\x0f\x73\xd6\xb8\x02\x37\x75\xfb\xb8\x75\x77\xd0\xe3\x8a\x7e\x85\x01\xda\xef\xf2\x05\xab\x2d\x63\xb0\xe7\x28\x63\xf6\x27\x6b\x35\x87\x9a\x0b\x87\x01\x81\xd1\x84\x84\xad\xa2\xb7\x05\x84\x46\x49\xbf\x70\x68\x83\xa9\xc0\x7d\xe5\xd8\xb7\x84\xed\x04\x6c\x45\x70\xe6\xb4\x74\xac\x3d\x27\xf3\xd9\xec\xbf\x0b\xbc\xc5\x74\xcb\x73\x5b\x86\x85\xa8\x6f\xb5\xcf\x6b\xa8\x4a\xa1\x0e\x27\xc4\x07\x14\x38\xbc\xab\xcc\x56\x6f\x58\x27\x8b\xa0\x7a\xfd\x70\xf1\x6a\xca\x95\x1d\x2c\x57\x18\xc9\x1a\x76\x25\xdb\x92\xdf\xdf\xbf\x7b\x6b\x6d\xfd\x89\x5d\x6f\x98\xb1\x2e\xee\x74\xaa\x6a\x26\xe3\xf1\x2f\x6f\xce\xc7\x13\xd2\x36\x82\x81\xf2\xd2\x6c\x35\x55\xa6\x15\xed\x14\x9b\x89\xf3\x27\xd8\x95\x9a\xd1\xfc\xd6\x58\x6a\x59\x56\x52\x59\xb0\xe5\x56\x73\xcb\x5e\x42\xe6\x38\x01\xc3\x64\x1e\xcb\x8d\x10\x7d\x08\x5b\xa1\x16\x3f\x9d\x3a\x4b\x9f\xd1\x12\x96\x84\xa7\x18\xa4\xa0\x0f\xf3\x8d\xc1\x85\xff\xcd\x3a\x55\xa2\x0e\xce\xbe\xfe\xf5\xfd\x47\xec\x24\xda\xf9\xe9\xb6\x14\x16\xa0\xd4\xf5\x97\x9f\xb5\xaa\x3e\x03\xe1\xb2\x70\xe6\x4d\xad\xa4\x61\xe7\xc0\xdc\x84\x8c\x2d\x7c\x8e\x4b\x5b\x89\xb1\xd3\x54\x3e\xd9\x35\xab\xd4\x0d\x7b\x55\x72\x91\xc7\xaa\xc3\xcd\xcb\xdb\xb3\x3c\x8e\x32\x25\x2d\xe4\xb8\x8b\xb2\x5d\xb5\x52\x8f\x73\xd8\xd6\xa8\xe5\x6c\x52\x2d\x3b\xe5\xe9\xa4\xda\x15\xa7\x7e\xc9\xa1\x35\xd0\x95\xfb\x5b\x84\x7c\x52\x92\x7d\x50\x39\x8b\x1d\xf4\x68\xf3\x2e\xa0\x16\x00\x82\x3e\xf5\x74\xf6\xb4\xa9\x3a\xbd\x07\x41\x37\x1f\x2a\x8f\xf7\x5e\x85\xc3\x4c\x48\xc1\x6f\xbd\x16\x6a\x8b\x29\x4b\x37\x56\x61\xce\xf6\xe5\xba\xe0\x0c\xc4\xaf\xc7\xc8\xbd\xdd\xf6\xd2\x10\xd7\x62\xd5\xeb\x48\xf7\xc9\xc3\x9d\xed\x20\x77\xe1\x89\x08\xa9\xda\x92\xd6\x96\x46\xf4\x73\xfb\x58\x61\x6a\x6a\xe6\x72\xe6\x2b\x4c\xb1\x23\xc0\x63\x5f\xec\xfa\x82\x0a\x4d\x01\x0d\xcb\x47\x0c\xd3\xfb\x66\x65\xcf\xac\x8b\x53\x89\x86\x4b\xcd\xd6\x1d\xcb\x7e\xd1\x37\xc5\xf3\xf7\xef\xb0\x17\xb0\x0c\x78\xfd\xed\xd3\xd9\x2b\x55\x41\x7c\xc2\x49\xb1\x13\x0e\x1c\x3f\x1c\x18\xdb\x87\xa1\xff\x4b\x7e\x43\x7f\xe9\x91\xb4\x7b\x90\xe2\xed\x19\x68\xa9\xfa\xa3\x56\x35\x2d\x5c\x09\x68\x39\x12\xdf\xd3\xc0\x44\x83\x3d\x6a\xf0\x07\x35\x06\xa9\xba\x02\xf1\xb9\x6f\xe6\xbc\xd3\xe5\xae\xb0\x3d\xc0\xc7\xb3\x06\xb1\xcf\x2f\xae\x02\x71\xf0\x56\x82\xfe\x83\xe3\xd0\xb6\x9a\x29\x9a\xb8\xb8\x3a\x9a\xb7\xdd\x1e\x76\xe6\x0f\xec\x60\x0d\x6f\xd4\xfc\x13\x18\x57\x47\xe1\x1d\xd3\xbc\x86\xe2\xd9\x24\xe8\x0d\xf4\xce\xfd\x46\xea\x3b\x62\xdb\x10\x80\xcf\x0e\xde\xbb\xff\x16\xff\x02\xbc\x5b\xa0\xff\xef\x9e\x13\xe4\x0a\x80\x6e\x5f\x13\xdf\x0d\xf4\xf4\x41\xa0\xa7\x7f\x13\xe8\xe9\x3f\x00\xb4\x55\x45\x21\xd8\x6b\xae\xcd\xee\x51\x9c\x0f\x43\xe4\xf3\x28\x07\xd1\x28\xfc\x81\x89\xf3\x90\x3e\x39\x37\xb5\xa0\xb7\xf8\x02\x8c\x24\xe4\x29\xfc\x29\x00\x38\xc2\x10\x5f\xf0\x7b\x72\xb0\xb7\x82\xf6\xf9\x25\x0a\xff\x0e\x86\x45\x9c\x3a\xa6\xe1\x9f\x01\x00\x00\xff\xff\x2d\x8c\x33\xde\x0b\x0f\x00\x00")

func baseJsBytes() ([]byte, error) {
	return bindataRead(
		_baseJs,
		"base.js",
	)
}

func baseJs() (*asset, error) {
	bytes, err := baseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.js", size: 3851, mode: os.FileMode(420), modTime: time.Unix(1445772252, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.css":  baseCss,
	"base.html": baseHtml,
	"base.js":   baseJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base.css":  &bintree{baseCss, map[string]*bintree{}},
	"base.html": &bintree{baseHtml, map[string]*bintree{}},
	"base.js":   &bintree{baseJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
